/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _OAUTH_H_RPCGEN
#define _OAUTH_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct req_auth_req {
	char *cliend_id;
};
typedef struct req_auth_req req_auth_req;

struct req_auth_resp {
	char *auth_token;
	char *error_message;
};
typedef struct req_auth_resp req_auth_resp;

struct approve_req_token_req {
	char *auth_token;
};
typedef struct approve_req_token_req approve_req_token_req;

struct signed_token {
	char *auth_token;
	int perms;
};
typedef struct signed_token signed_token;

struct approve_req_token_resp {
	struct signed_token auth_signed_token;
};
typedef struct approve_req_token_resp approve_req_token_resp;

struct req_access_token_req {
	char *cliend_id;
	struct signed_token auth_signed_token;
	int auto_refresh;
};
typedef struct req_access_token_req req_access_token_req;

struct req_access_token_resp {
	char *access_token;
	char *refresh_token;
	int valability;
	char *error_message;
};
typedef struct req_access_token_resp req_access_token_resp;

struct req_refresh_token_req {
	char *refresh_token;
};
typedef struct req_refresh_token_req req_refresh_token_req;

struct req_refresh_token_resp {
	char *new_access_token;
	char *new_refresh_token;
};
typedef struct req_refresh_token_resp req_refresh_token_resp;

struct validate_delegated_action_req {
	char *operation_type;
	char *resource;
	char *access_token;
};
typedef struct validate_delegated_action_req validate_delegated_action_req;

struct validate_delegated_action_resp {
	char *message;
};
typedef struct validate_delegated_action_resp validate_delegated_action_resp;

#define OAUTH_PROG 0x32345678
#define OAUTH_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define request_authorization 1
extern  req_auth_resp * request_authorization_1(req_auth_req *, CLIENT *);
extern  req_auth_resp * request_authorization_1_svc(req_auth_req *, struct svc_req *);
#define approve_request_token 2
extern  approve_req_token_resp * approve_request_token_1(approve_req_token_req *, CLIENT *);
extern  approve_req_token_resp * approve_request_token_1_svc(approve_req_token_req *, struct svc_req *);
#define request_access_token 3
extern  req_access_token_resp * request_access_token_1(req_access_token_req *, CLIENT *);
extern  req_access_token_resp * request_access_token_1_svc(req_access_token_req *, struct svc_req *);
#define request_refresh_token 4
extern  req_refresh_token_resp * request_refresh_token_1(req_refresh_token_req *, CLIENT *);
extern  req_refresh_token_resp * request_refresh_token_1_svc(req_refresh_token_req *, struct svc_req *);
#define validate_delegated_action 5
extern  validate_delegated_action_resp * validate_delegated_action_1(validate_delegated_action_req *, CLIENT *);
extern  validate_delegated_action_resp * validate_delegated_action_1_svc(validate_delegated_action_req *, struct svc_req *);
extern int oauth_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define request_authorization 1
extern  req_auth_resp * request_authorization_1();
extern  req_auth_resp * request_authorization_1_svc();
#define approve_request_token 2
extern  approve_req_token_resp * approve_request_token_1();
extern  approve_req_token_resp * approve_request_token_1_svc();
#define request_access_token 3
extern  req_access_token_resp * request_access_token_1();
extern  req_access_token_resp * request_access_token_1_svc();
#define request_refresh_token 4
extern  req_refresh_token_resp * request_refresh_token_1();
extern  req_refresh_token_resp * request_refresh_token_1_svc();
#define validate_delegated_action 5
extern  validate_delegated_action_resp * validate_delegated_action_1();
extern  validate_delegated_action_resp * validate_delegated_action_1_svc();
extern int oauth_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_req_auth_req (XDR *, req_auth_req*);
extern  bool_t xdr_req_auth_resp (XDR *, req_auth_resp*);
extern  bool_t xdr_approve_req_token_req (XDR *, approve_req_token_req*);
extern  bool_t xdr_signed_token (XDR *, signed_token*);
extern  bool_t xdr_approve_req_token_resp (XDR *, approve_req_token_resp*);
extern  bool_t xdr_req_access_token_req (XDR *, req_access_token_req*);
extern  bool_t xdr_req_access_token_resp (XDR *, req_access_token_resp*);
extern  bool_t xdr_req_refresh_token_req (XDR *, req_refresh_token_req*);
extern  bool_t xdr_req_refresh_token_resp (XDR *, req_refresh_token_resp*);
extern  bool_t xdr_validate_delegated_action_req (XDR *, validate_delegated_action_req*);
extern  bool_t xdr_validate_delegated_action_resp (XDR *, validate_delegated_action_resp*);

#else /* K&R C */
extern bool_t xdr_req_auth_req ();
extern bool_t xdr_req_auth_resp ();
extern bool_t xdr_approve_req_token_req ();
extern bool_t xdr_signed_token ();
extern bool_t xdr_approve_req_token_resp ();
extern bool_t xdr_req_access_token_req ();
extern bool_t xdr_req_access_token_resp ();
extern bool_t xdr_req_refresh_token_req ();
extern bool_t xdr_req_refresh_token_resp ();
extern bool_t xdr_validate_delegated_action_req ();
extern bool_t xdr_validate_delegated_action_resp ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_OAUTH_H_RPCGEN */
